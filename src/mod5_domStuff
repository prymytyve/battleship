const gameBoardDisplay = document.querySelector(".gameBoard");
const mainBoardDisplay = document.querySelector(".mainBoard");
const subBoardDisplay = document.querySelector(".subBoard");
const turnInfo = document.querySelector(".turnInfo");
const dialog = document.querySelector("dialog");

const generateGameBoard = () => {
  const board = document.createElement("table");
  board.classList.add("gameBoard");
  for (let i = 0; i < 10; i++) {
    const row = document.createElement("tr");
    row.classList.add("row");
    for (let j = 0; j < 10; j++) {
      const cell = document.createElement("td");
      cell.classList.add("cell");
      cell.setAttribute("x", i);
      cell.setAttribute("y", j);
      row.appendChild(cell);
    }
    board.appendChild(row);
  }
  return board;
};

function shipsDisplay(playerBoard, displayBoard) {
  for (let i = 0; i < 10; i++) {
    for (let j = 0; j < 10; j++) {
      const thisCell = displayBoard.querySelector(`[x="${i}"][y="${j}"]`);
      itemHandler(playerBoard[i][j], thisCell);
    }
  }
}

function itemHandler(val, cell) {
  if (typeof val === "object") {
    cell.textContent = val.shipName;
    cell.classList.add(val.shipName);
  } else if (typeof val === "string" && val !== "M") {
    cell.textContent = val;
    cell.classList.add("hit");
  }
}

function attacksDisplay(playerBoard, displayBoard) {
  for (let i = 0; i < 10; i++) {
    for (let j = 0; j < 10; j++) {
      const thisCell = displayBoard.querySelector(`[x="${i}"][y="${j}"]`);
      itemHandler2(playerBoard[i][j], thisCell);
    }
  }
}

function itemHandler2(val, cell) {
  if (typeof val === "string" && val !== "M") {
    cell.textContent = val;
    cell.classList.add(val, "hit");
  } else if (typeof val === "string" && val === "M") {
    cell.classList.add("miss");
  }
}

function updateDisplays4Battle(turnPlayer, opponent) {
  mainBoardDisplay.replaceChildren(generateGameBoard());
  subBoardDisplay.replaceChildren(generateGameBoard());
  attacksDisplay(opponent.playerBoard, mainBoardDisplay);
  shipsDisplay(turnPlayer.playerBoard, subBoardDisplay);
}

function popUp(callbackFn, ...args) {
  const infoBlock = document.createElement("div");
  infoBlock.classList.add("infoBlock");
  const startTurnBtn = document.createElement("button");
  startTurnBtn.textContent = "ok";
  startTurnBtn.addEventListener("click", (e) => {
    e.preventDefault;
    callbackFn();
    dialog.close();
  });
  args.forEach((arg) => {
    const p = document.createElement("p");
    p.textContent = arg;
    infoBlock.appendChild(p);
  });
  infoBlock.appendChild(startTurnBtn);
  dialog.replaceChildren(infoBlock);
  dialog.showModal();
}

function addEventFnToCell(callback) {
  const cells = mainBoardDisplay.querySelectorAll(".cell");
  cells.forEach((cell) =>
    cell.addEventListener("click", () => {
      const x = Number(cell.getAttribute("x"));
      const y = Number(cell.getAttribute("y"));
      const coordinates = [x, y];
      callback(cell, coordinates);
    })
  );
}

function buttonCreator(text, callbackFn) {
  const thisButton = document.createElement("button");
  thisButton.textContent = text;
  thisButton.addEventListener("click", (e) => {
    e.preventDefault();
    callbackFn();
  });
  return thisButton;
}

export {
  generateGameBoard,
  updateDisplays4Battle,
  attacksDisplay,
  shipsDisplay,
  popUp,
  addEventFnToCell,
  buttonCreator,
};
